
import java.awt.Component;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import javax.swing.JPanel;
import javax.swing.JTextField;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Administrador
 */
public class Sorting extends javax.swing.JFrame {

    /**
     * Creates new form Sorting
     */
    public int[] arreglo = new int[10];

    public Sorting() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel_Original = new javax.swing.JPanel();
        jt_vector2 = new javax.swing.JTextField();
        jt_vector1 = new javax.swing.JTextField();
        jt_vector9 = new javax.swing.JTextField();
        jt_vector6 = new javax.swing.JTextField();
        jt_vector5 = new javax.swing.JTextField();
        jt_vector4 = new javax.swing.JTextField();
        jt_vector3 = new javax.swing.JTextField();
        jt_vector8 = new javax.swing.JTextField();
        jt_vector7 = new javax.swing.JTextField();
        jt_vector11 = new javax.swing.JTextField();
        jPanel_Sorted = new javax.swing.JPanel();
        jt_Sort2 = new javax.swing.JTextField();
        jt_Sort1 = new javax.swing.JTextField();
        jt_Sort9 = new javax.swing.JTextField();
        jt_Sort6 = new javax.swing.JTextField();
        jt_Sort5 = new javax.swing.JTextField();
        jt_Sort4 = new javax.swing.JTextField();
        jt_Sort3 = new javax.swing.JTextField();
        jt_Sort8 = new javax.swing.JTextField();
        jt_Sort7 = new javax.swing.JTextField();
        jt_Sort10 = new javax.swing.JTextField();
        jButton_Merge = new javax.swing.JButton();
        jButton_Quick = new javax.swing.JButton();
        jButton_Clean = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MERGE & QUICK SORTING");

        jt_vector2.setToolTipText("");

        jt_vector1.setToolTipText("");

        jt_vector9.setToolTipText("");
        jt_vector9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jt_vector9ActionPerformed(evt);
            }
        });

        jt_vector6.setToolTipText("");

        jt_vector5.setToolTipText("");

        jt_vector4.setToolTipText("");

        jt_vector3.setToolTipText("");

        jt_vector8.setToolTipText("");

        jt_vector7.setToolTipText("");

        jt_vector11.setToolTipText("");

        javax.swing.GroupLayout jPanel_OriginalLayout = new javax.swing.GroupLayout(jPanel_Original);
        jPanel_Original.setLayout(jPanel_OriginalLayout);
        jPanel_OriginalLayout.setHorizontalGroup(
            jPanel_OriginalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_OriginalLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jt_vector1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jt_vector2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jt_vector3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jt_vector4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jt_vector5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jt_vector6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jt_vector7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jt_vector8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jt_vector9, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jt_vector11, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel_OriginalLayout.setVerticalGroup(
            jPanel_OriginalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_OriginalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_OriginalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jt_vector2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jt_vector1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jt_vector6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jt_vector5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jt_vector4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jt_vector3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jt_vector7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jt_vector11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jt_vector9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jt_vector8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel_Sorted.setName(""); // NOI18N

        jt_Sort2.setToolTipText("");
        jt_Sort2.setEnabled(false);

        jt_Sort1.setToolTipText("");
        jt_Sort1.setEnabled(false);

        jt_Sort9.setToolTipText("");
        jt_Sort9.setEnabled(false);
        jt_Sort9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jt_Sort9ActionPerformed(evt);
            }
        });

        jt_Sort6.setToolTipText("");
        jt_Sort6.setEnabled(false);

        jt_Sort5.setToolTipText("");
        jt_Sort5.setEnabled(false);

        jt_Sort4.setToolTipText("");
        jt_Sort4.setEnabled(false);

        jt_Sort3.setToolTipText("");
        jt_Sort3.setEnabled(false);

        jt_Sort8.setToolTipText("");
        jt_Sort8.setEnabled(false);

        jt_Sort7.setToolTipText("");
        jt_Sort7.setEnabled(false);

        jt_Sort10.setToolTipText("");
        jt_Sort10.setEnabled(false);

        javax.swing.GroupLayout jPanel_SortedLayout = new javax.swing.GroupLayout(jPanel_Sorted);
        jPanel_Sorted.setLayout(jPanel_SortedLayout);
        jPanel_SortedLayout.setHorizontalGroup(
            jPanel_SortedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_SortedLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jt_Sort1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jt_Sort2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jt_Sort3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jt_Sort4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jt_Sort5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jt_Sort6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jt_Sort7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jt_Sort8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jt_Sort9, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jt_Sort10, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel_SortedLayout.setVerticalGroup(
            jPanel_SortedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_SortedLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_SortedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jt_Sort2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jt_Sort1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jt_Sort6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jt_Sort5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jt_Sort4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jt_Sort3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jt_Sort7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jt_Sort10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jt_Sort9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jt_Sort8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton_Merge.setText("MergeSort");
        jButton_Merge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_MergeActionPerformed(evt);
            }
        });

        jButton_Quick.setText("Quick Sort");
        jButton_Quick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_QuickActionPerformed(evt);
            }
        });

        jButton_Clean.setText("Limpiar");
        jButton_Clean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_CleanActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel_Sorted, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel_Original, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(116, 116, 116)
                        .addComponent(jButton_Merge)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_Quick)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_Clean)))
                .addContainerGap(49, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addComponent(jPanel_Original, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_Merge)
                    .addComponent(jButton_Quick)
                    .addComponent(jButton_Clean))
                .addGap(22, 22, 22)
                .addComponent(jPanel_Sorted, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(88, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jt_vector9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jt_vector9ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jt_vector9ActionPerformed

    private void jt_Sort9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jt_Sort9ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jt_Sort9ActionPerformed

    private void jButton_MergeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_MergeActionPerformed
        // TODO add your handling code here:
        if (ValidarNumericos(jPanel_Original)) {
            arreglo = mergeSort(arreglo);
            mostrar();
        }
    }//GEN-LAST:event_jButton_MergeActionPerformed

    private void jButton_QuickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_QuickActionPerformed
        // TODO add your handling code here:
        if (ValidarNumericos(jPanel_Original)) {
            QuickSort(arreglo, 0, arreglo.length - 1);
            mostrar();
        }
    }//GEN-LAST:event_jButton_QuickActionPerformed

    private void jButton_CleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_CleanActionPerformed
        // TODO add your handling code here:
        limpiar();
    }//GEN-LAST:event_jButton_CleanActionPerformed
    public void limpiar() {
        Component[] componentes = jPanel_Sorted.getComponents();
        for (int i = 0; i < componentes.length; i++) {
            if (componentes[i] instanceof JTextField) {
                ((JTextField) componentes[i]).setEnabled(false);
                ((JTextField) componentes[i]).setText("");
            }
        }
        componentes = jPanel_Original.getComponents();
        for (int i = 0; i < componentes.length; i++) {
            if (componentes[i] instanceof JTextField) {
                ((JTextField) componentes[i]).setEnabled(true);
                ((JTextField) componentes[i]).setText("");
            }
        }

    }

    public void mostrar() {
        Component[] componentes = jPanel_Sorted.getComponents();
        for (int i = 0; i < componentes.length; i++) {
            if (componentes[i] instanceof JTextField) {
                ((JTextField) componentes[i]).setEnabled(false);
                ((JTextField) componentes[i]).setText(String.valueOf(arreglo[i]));
            }
        }
    }

    public boolean ValidarNumericos(JPanel j) {
        boolean esValido = true;
        Component[] componentes = j.getComponents();
        for (int i = 0; i < componentes.length; i++) {
            if (componentes[i] instanceof JTextField) {
                ((JTextField) componentes[i]).setEnabled(true);
                try {
                    String s = ((JTextField) componentes[i]).getText();
                    int num = Integer.parseInt(s);
                    arreglo[i] = num;
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "El vector posee datos no válidos en la " + String.valueOf(i + 1) + " posición, se deben ingresar números enteros", "Error de datos", ERROR_MESSAGE);
                    esValido = false;
                }
            }
        }
        return esValido;
    }

    public int[] mergeSort(int array[]) // pre: array está lleno, todos los elementos están validados
    // post: array es ordenado de manera ascendente de menor a mayor
    {
        // Si el array tiene más que un elemento, necesitamos dividirlo y unir las mitades ordenadas
        if (array.length > 1) {
		// número de elementos en sub-array 1 tiene la mitad más pequeña de los elementos
           
            // e.j. si son 7 elementos en total, sub-array 1 tendrá 3, y sub-array 2 tendrá 4
            int elementsInA1 = array.length / 2;
		// we initialize the length of sub-array 2 to
            // equal the total length minus the length of sub-array 1
            int elementsInA2 = array.length - elementsInA1;
            // declare and initialize the two arrays once we've determined their sizes
            int arr1[] = new int[elementsInA1];
            int arr2[] = new int[elementsInA2];
            // copy the first part of 'array' into 'arr1', causing arr1 to become full
            for (int i = 0; i < elementsInA1; i++) {
                arr1[i] = array[i];
            }
            // copy the remaining elements of 'array' into 'arr2', causing arr2 to become full
            for (int i = elementsInA1; i < elementsInA1 + elementsInA2; i++) {
                arr2[i - elementsInA1] = array[i];
            }
		// recursively call mergeSort on each of the two sub-arrays that we've just created
            // note: when mergeSort returns, arr1 and arr2 will both be sorted!
            // it's not magic, the merging is done below, that's how mergesort works :)
            arr1 = mergeSort(arr1);
            arr2 = mergeSort(arr2);

		// the three variables below are indexes that we'll need for merging
            // [i] stores the index of the main array. it will be used to let us
            // know where to place the smallest element from the two sub-arrays.
            // [j] stores the index of which element from arr1 is currently being compared
            // [k] stores the index of which element from arr2 is currently being compared
            int i = 0, j = 0, k = 0;
		// the below loop will run until one of the sub-arrays becomes empty
            // in my implementation, it means until the index equals the length of the sub-array
            while (arr1.length != j && arr2.length != k) {
                // if the current element of arr1 is less than current element of arr2
                if (arr1[j] < arr2[k]) {
                    // copy the current element of arr1 into the final array
                    array[i] = arr1[j];
				// increase the index of the final array to avoid replacing the element
                    // which we've just added
                    i++;
				// increase the index of arr1 to avoid comparing the element
                    // which we've just added
                    j++;
                } // if the current element of arr2 is less than current element of arr1
                else {
                    // copy the current element of arr1 into the final array
                    array[i] = arr2[k];
				// increase the index of the final array to avoid replacing the element
                    // which we've just added
                    i++;
				// increase the index of arr2 to avoid comparing the element
                    // which we've just added
                    k++;
                }
            }
		// at this point, one of the sub-arrays has been exhausted and there are no more
            // elements in it to compare. this means that all the elements in the remaining
            // array are the highest (and sorted), so it's safe to copy them all into the
            // final array.
            while (arr1.length != j) {
                array[i] = arr1[j];
                i++;
                j++;
            }
            while (arr2.length != k) {
                array[i] = arr2[k];
                i++;
                k++;
            }
        }
        // return the sorted array to the caller of the function
        return array;
    }

    public void QuickSort(int n[], int primero, int ultimo) {
        int i = primero;  // Variable contadora desde el primer elemento
        int j = ultimo; //Variable contadora desde el último elemento
        int pivote = n[primero];
        int auxiliar;

        while (i < j) {
            while (n[i] <= pivote && i < j) {
                i++;
            }
            while (n[j] > pivote) {
                j--;
            }
            if (i < j) {
                auxiliar = n[i];
                n[i] = n[j];
                n[j] = auxiliar;
            }
        }
        auxiliar = n[primero];
        n[primero] = n[j];
        n[j] = auxiliar;
        if (primero < j - 1) {
            QuickSort(n, primero, j - 1); // ordenamos subarray izquierdo
        }
        if (j + 1 < ultimo) {
            QuickSort(n, j + 1, ultimo); // ordenamos subarray derecho
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Sorting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Sorting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Sorting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Sorting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Sorting().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_Clean;
    private javax.swing.JButton jButton_Merge;
    private javax.swing.JButton jButton_Quick;
    private javax.swing.JPanel jPanel_Original;
    private javax.swing.JPanel jPanel_Sorted;
    private javax.swing.JTextField jt_Sort1;
    private javax.swing.JTextField jt_Sort10;
    private javax.swing.JTextField jt_Sort2;
    private javax.swing.JTextField jt_Sort3;
    private javax.swing.JTextField jt_Sort4;
    private javax.swing.JTextField jt_Sort5;
    private javax.swing.JTextField jt_Sort6;
    private javax.swing.JTextField jt_Sort7;
    private javax.swing.JTextField jt_Sort8;
    private javax.swing.JTextField jt_Sort9;
    private javax.swing.JTextField jt_vector1;
    private javax.swing.JTextField jt_vector11;
    private javax.swing.JTextField jt_vector2;
    private javax.swing.JTextField jt_vector3;
    private javax.swing.JTextField jt_vector4;
    private javax.swing.JTextField jt_vector5;
    private javax.swing.JTextField jt_vector6;
    private javax.swing.JTextField jt_vector7;
    private javax.swing.JTextField jt_vector8;
    private javax.swing.JTextField jt_vector9;
    // End of variables declaration//GEN-END:variables
}
